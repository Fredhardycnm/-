package pro;

import java.util.List;
import java.util.Scanner;

public class LibrarySystem {
    private static Scanner scanner = new Scanner(System.in);
    private static Users currentUser = null;

    public static void main(String[] args) {
        System.out.println("\n=====================");
        System.out.println("  欢 迎 进 入 图 书 管 理 系 统  ");
        System.out.println("=====================");
        System.out.println("开 始 使 用 前，请先登录或注册");

        while (true) {
            if (currentUser == null) {
                showLoginMenu();
            } else {
                if ("admin".equals(currentUser.getRole())) {
                    showAdminMenu();
                } else {
                    showUserMenu();
                }
            }
        }
    }

    private static void showLoginMenu() {System.out.println("\n=====================");System.out.println("      使 用 界 面      ");System.out.println("=====================");System.out.println("  1、登 录            ");System.out.println("  2、注 册            ");System.out.println("  0、退出系统          ");System.out.println("---------------------");System.out.print("请输入选项：");int choice = getValidIntInput(0, 2);switch (choice) {case 1: login();break; case 2: register();break; case 0: System.out.println("\n感谢使用");System.exit(0);break; default: System.out.println("输入错误，请重新输入");}}

    private static void login() {System.out.println("\n=====================");System.out.println("        登 录          ");System.out.println("=====================");System.out.print("请输入用户名：");String username = scanner.nextLine();System.out.print("请输入密码：");String password = scanner.nextLine();System.out.println("---------------------");if (UserDAO.validateUser(username, password)) {currentUser = UserDAO.getUserByUsername(username);System.out.println("\n登录成功，欢迎，" + currentUser.getUsername() + "!");} else System.out.println("\n用户名或密码错误");}

    private static void register() {System.out.println("\n=====================");System.out.println("        注 册          ");System.out.println("=====================");System.out.print("请输入用户名：");String username = scanner.nextLine();System.out.print("请输入密码：");String password = scanner.nextLine();System.out.print("请输入邮箱：");String email = scanner.nextLine();System.out.println("---------------------");Users users = new Users(username, password, email);int result = UserDAO.addUser(users);if (result > 0) System.out.println("\n注册成功，请登录"); else System.out.println("\n注册失败，请检查原因");}

    private static void showAdminMenu() {System.out.println("\n=====================");System.out.println("     管 理 员 界 面     ");System.out.println("=====================");System.out.println("  1、管理图书          ");System.out.println("  2、管理用户          ");System.out.println("  3、查看借阅记录      ");System.out.println("  0、退出登录          ");System.out.println("---------------------");System.out.print("请输入选项：");int choice = getValidIntInput(0, 3);switch (choice) {case 1: manageBooks();break; case 2: managerUsers();break; case 3: viewBorrowRecords();break; case 0: currentUser = null;System.out.println("\n已退出登录");break; default: System.out.println("输入错误，请重新输入");}}

    private static void manageBooks() {System.out.println("\n=====================");System.out.println("     图 书 管 理       ");System.out.println("=====================");System.out.println("  1、新 增 图 书      ");System.out.println("  2、查 看 所 有 图 书");System.out.println("  3、修 改 图 书      ");System.out.println("  4、删 除 图 书      ");System.out.println("  0、返 回 上 级      ");System.out.println("---------------------");System.out.print("请输入选项：");int choice = getValidIntInput(0, 4);switch (choice) {case 1: addBook();break; case 2: viewAllBooks();break; case 3: updateBook();break; case 4: deleteBook();break; case 0: return; default: System.out.println("输入错误，请重新输入");}}

    private static void addBook() {System.out.println("\n=====================");System.out.println("     新 增 图 书       ");System.out.println("=====================");System.out.print("请输入书名：");String title = scanner.nextLine();System.out.print("请输入作者：");String author = scanner.nextLine();System.out.print("请输入ISBN：");String isbn = scanner.nextLine();System.out.print("请输入出版社：");String publisher = scanner.nextLine(), publishDate; while (true) { System.out.print("请输入出版日期（YYYY-MM-DD）：");publishDate = scanner.nextLine();try { /* 使用 LocalDate.parse() 验证日期合法性 */ java.time.LocalDate.parse(publishDate); break; } catch (java.time.format.DateTimeParseException e) { System.out.println("无效的日期，请输入合法的 YYYY-MM-DD 格式（例如：2023-04-05）。");} } System.out.print("请输入分类（建议使用《中国图书馆分类法》编码，如 TP311）："); String category = scanner.nextLine(); int quantity; while (true) { System.out.print("请输入库存数量：");if (scanner.hasNextInt()) { quantity = scanner.nextInt(); if (quantity >= 0) break; else System.out.println("库存数量不能为负数。");} else { System.out.println("请输入有效的整数。"); scanner.next(); /* 清除无效输入 */ } } scanner.nextLine(); /* 清除换行符 */ System.out.println("---------------------"); Book book = new Book(); book.setTitle(title); book.setAuthor(author); book.setIsbn(isbn);book.setPublisher(publisher); book.setPublishDate(publishDate); book.setCategory(category); book.setQuantity(quantity); int result = BookDAO.addBook(book);if (result > 0) System.out.println("\n图书添加成功"); else System.out.println("\n图书添加失败"); }

    private static void viewAllBooks() {System.out.println("\n=====================");System.out.println("     图 书 列 表       ");System.out.println("=====================");List<Book> books = BookDAO.getAllBooks();if (books.isEmpty()) {System.out.println("\n暂无图书信息");return;} /* 表头（新增出版日期、出版社、分类） */System.out.println("------------------------------------------------------------------------------------------------------------------");System.out.printf("%4s | %-20s | %-15s | %-10s | %-12s | %-15s | %-20s\n", "ID", "书名", "作者", "库存", "出版日期", "出版社", "分类(中图法)").println("------------------------------------------------------------------------------------------------------------------");for (Book book : books) System.out.printf("%4d | %-20s | %-15s | %6d | %-12s | %-15s | %-20s\n",                book.getId(),                book.getTitle(),                book.getAuthor(),                book.getQuantity(),                book.getPublishDate(),                book.getPublisher(),                book.getCategory());System.out.println("------------------------------------------------------------------------------------------------------------------");}

    private static void updateBook() {System.out.println("\n=====================");System.out.println("     修 改 图 书       ");System.out.println("=====================");System.out.print("请输入书名：");String title = scanner.nextLine();System.out.print("请输入作者：");String author = scanner.nextLine();System.out.print("请输入ISBN：");String isbn = scanner.nextLine();System.out.print("请输入出版社：");String publisher = scanner.nextLine(), publishDate; while (true) { System.out.print("请输入出版日期（YYYY-MM-DD）：");publishDate = scanner.nextLine();try { /* 使用 LocalDate.parse() 验证日期合法性 */ java.time.LocalDate.parse(publishDate); break; } catch (java.time.format.DateTimeParseException e) { System.out.println("无效的日期，请输入合法的 YYYY-MM-DD 格式（例如：2023-04-05）。");} } System.out.print("请输入分类（建议使用《中国图书馆分类法》编码，如 TP311）："); String category = scanner.nextLine(); System.out.print("请输入库存数量："); int quantity = scanner.nextInt(); scanner.nextLine(); /* 清除换行符 */ System.out.println("---------------------"); Book book = new Book(); book.setTitle(title); book.setAuthor(author); book.setIsbn(isbn);book.setPublisher(publisher); book.setPublishDate(publishDate); book.setCategory(category); book.setQuantity(quantity); int result = BookDAO.addBook(book);if (result > 0) System.out.println("\n图书添加成功"); else System.out.println("\n图书添加失败"); }

    private static void deleteBook() {System.out.println("\n=====================");System.out.println("     删 除 图 书       ");System.out.println("=====================");viewAllBooks();System.out.print("\n请输入要删除的图书ID：");int id = scanner.nextInt();scanner.nextLine();System.out.println("---------------------");int result = BookDAO.deleteBook(id);if (result > 0) System.out.println("\n图书删除成功！"); else System.out.println("\n图书删除失败！");}

    private static void managerUsers() {System.out.println("\n=====================");System.out.println("     用 户 管 理       ");System.out.println("=====================");System.out.println("  1、查 看 所 有 用户  ");System.out.println("  2、删 除 用 户      ");System.out.println("  0、返 回 上 级      ");System.out.println("---------------------");System.out.print("请输入选项：");int choice = getValidIntInput(0, 2);switch (choice) {case 1: viewAllUsers();break; case 2: deleteUser();break; case 0: return; default: System.out.println("输入错误，请重新输入");}}

    private static void viewAllUsers() {System.out.println("\n=====================");System.out.println("     用户列表         ");System.out.println("=====================");List<Users> users = UserDAO.getAllUsers();if (users.isEmpty()) {System.out.println("\n暂无用户信息");return;} /* 表头 */System.out.println("----------------------------------------------");System.out.printf("%4s | %-15s | %-20s\n", "ID", "用户名", "角色").println("----------------------------------------------");for (Users user : users) System.out.printf("%4d | %-15s | %-20s\n",                user.getId(),                user.getUsername(),                user.getRole());System.out.println("----------------------------------------------");}

    private static void deleteUser() {System.out.println("\n=====================");System.out.println("     删 除 用 户       ");System.out.println("=====================");viewAllUsers();System.out.print("\n请输入要删除的用户ID：");int userId = scanner.nextInt();scanner.nextLine();System.out.println("---------------------");if (userId == currentUser.getId()) {System.out.println("\n不能删除当前登录的用户！");return;}int result = UserDAO.deleteUser(userId);if (result > 0) System.out.println("\n用户删除成功！"); else if (result == -2) System.out.println("\n用户有未归还的图书，不能删除！"); else System.out.println("\n用户删除失败！");}

    private static void viewBorrowRecords() {System.out.println("\n=====================");System.out.println("     所 有 借 阅 记 录   ");System.out.println("=====================");List<BorrowRecord> records = BorrowRecordDAO.getAllBorrowRecords();if (records.isEmpty()) {System.out.println("\n暂无借阅记录");return;} /* 表头 */System.out.println("------------------------------------------------------------------------------------------------------------------");System.out.printf("%4s | %-10s | %-20s | %-12s | %-12s | %-10s\n", "ID", "用户ID", "图书", "借出日期", "归还日期", "状态").println("------------------------------------------------------------------------------------------------------------------");for (BorrowRecord record : records) {Book book = BookDAO.getBookById(record.getBookId());String status = record.getReturnDate() == null ? "未归还" : "已归还";System.out.printf("%4d | %-10d | %-20s | %-12s | %-12s | %-10s\n", record.getId(), record.getUserId(), (book != null ? book.getTitle() : "未知图书"), record.getBorrowDate(), record.getReturnDate() != null ? record.getReturnDate() : "---", status);}System.out.println("------------------------------------------------------------------------------------------------------------------");}

    private static void showUserMenu() {System.out.println("\n=====================");System.out.println("     普 通 用 户 界 面   ");System.out.println("=====================");System.out.println("  1、查看所有图书      ");System.out.println("  2、搜索图书          ");System.out.println("  3、借阅图书          ");System.out.println("  4、归还图书          ");System.out.println("  5、查看我的借阅记录  ");System.out.println("  0、退出登录          ");System.out.println("---------------------");System.out.print("请输入选项：");int choice = getValidIntInput(0, 5);switch (choice) {case 1: viewAllBooks();break; case 2: searchBooks();break; case 3: borrowBook();break; case 4: returnBook();break; case 5: viewMyBorrowRecords();break; case 0: currentUser = null;System.out.println("\n已退出登录。");break; default: System.out.println("输入错误，请重新输入");}}

    private static void searchBooks() {System.out.println("\n=====================");System.out.println("     图 书 搜 索       ");System.out.println("=====================");System.out.print("\n请输入需要搜索的关键词（书名/作者/ISBN）：");String key = scanner.nextLine();System.out.println("---------------------");List<Book> books = BookDAO.searchBooks(key);if (books.isEmpty()) System.out.println("\n没有找到相关图书"); else {System.out.println("\n搜索结果："); /* 表头 */System.out.println("------------------------------------------------------------------------------------------------------------------");System.out.printf("%4s | %-20s | %-15s | %-15s | %-12s | %-15s | %-10s\n", "ID", "书名", "作者", "ISBN", "分类", "出版社", "库存").println("------------------------------------------------------------------------------------------------------------------");for (Book book : books) System.out.printf("%4d | %-20s | %-15s | %-15s | %-12s | %-15s | %6d\n",                    book.getId(),                    book.getTitle(),                    book.getAuthor(),                    book.getIsbn(),                    book.getCategory(),                    book.getPublisher(),                    book.getQuantity());System.out.println("------------------------------------------------------------------------------------------------------------------");}}

    private static void borrowBook() {System.out.println("\n=====================");System.out.println("     借 阅 图 书       ");System.out.println("=====================");viewAllBooks();System.out.print("\n请输入需要借阅的图书ID：");int id = scanner.nextInt();scanner.nextLine();System.out.println("---------------------");int result = BorrowRecordDAO.borrowBook(currentUser.getId(), id);if (result > 0) System.out.println("\n借阅成功"); else if (result == -1) System.out.println("\n借阅失败，图书不存在或库存不足"); else System.out.println("\n借阅失败");}

    private static void returnBook() {System.out.println("\n=====================");System.out.println("     归 还 图 书       ");System.out.println("=====================");viewMyBorrowRecords();System.out.print("\n请输入需要归还的记录ID：");int recordId = scanner.nextInt();scanner.nextLine();System.out.println("---------------------");int result = BorrowRecordDAO.returnBook(recordId);if (result > 0) System.out.println("\n归还成功"); else System.out.println("\n归还失败");}

    private static void viewMyBorrowRecords() {System.out.println("\n=====================");System.out.println("     借阅记录         ");System.out.println("=====================");List<BorrowRecord> records = BorrowRecordDAO.getBorrowRecordsByUser(currentUser.getId());if (records.isEmpty()) {System.out.println("\n暂无借阅记录");return;} /* 表头 */System.out.println("------------------------------------------------------------------");System.out.printf("%4s | %-20s | %-12s | %-12s\n", "ID", "书名", "借阅日期", "归还日期").println("------------------------------------------------------------------");for (BorrowRecord record : records) System.out.printf("%4d | %-20s | %-12s | %-12s\n",                record.getId(),                record.getBookTitle(),                record.getBorrowDate(),                record.getReturnDate());System.out.println("------------------------------------------------------------------");}

    // 获取合法的整数输入
    private static int getValidIntInput(int min, int max) {while (true) {if (scanner.hasNextInt()) {int choice = scanner.nextInt();scanner.nextLine();if (choice >= min && choice <= max) return choice; else System.out.println("\n输入超出范围，请在 " + min + " ~ " + max + " 之间选择：");} else {String invalid = scanner.next();System.out.println("\n无效输入: '" + invalid + "'，请输入有效的数字。");}System.out.print("请重新输入：");}}}